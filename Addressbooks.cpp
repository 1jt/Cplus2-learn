#include <iostream>
#include <windows.h>
#include <conio.h> 
#include <string>
#include <time.h>
#include <regex>
constexpr auto MAX = 10;

using namespace std;

// 联系人结构体
struct Person
{
	string m_Name;
	int m_Sex;
	int m_Age;
	string m_Phone;
	string m_Addr;
};
// 通讯录结构体
struct Addressbooks
{
	// 通讯录中保存的联系人数组
	Person personArray[MAX];
	// 通讯录中当前记录联系人个数
	int m_Size = 0;
};

// 菜单
void showMenu();
// 1.添加联系人
void addPerson(Addressbooks* abs);
// 2.显示联系人
void showPerson(Addressbooks* abs);
// 3. 删除联系人
int isExit(Addressbooks* abs,string name);//检测联系人是否存在，如果存在，返回具体位置，不存在返回-1
void deletePerson(Addressbooks* abs);
// 4. 查找联系人
void findPerson(Addressbooks* abs);
// 5. 修改联系人
void modifyPerson(Addressbooks* abs);
// 6. 清空联系人
void cleanPerson(Addressbooks* abs);

string NAME()
{
	srand((unsigned int)time(0));//种随机数种子
	//百家姓-单姓
	const char* NA1[444] = { "赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "褚", "卫", "蒋", "沈", "韩", "杨", "朱", "秦", "尤", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏", "陶", "姜", "戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏", "潘", "葛", "奚", "范", "彭", "郎", "鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "俞", "任", "袁", "柳", "酆", "鲍", "史", "唐", "费", "廉", "岑", "薛", "雷", "贺", "倪", "汤", "滕", "殷", "罗", "毕", "郝", "邬", "安", "常", "乐", "于", "时", "傅", "皮", "卞", "齐", "康", "伍", "余", "元", "卜", "顾", "孟", "平", "黄", "和", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "禹", "狄", "米", "贝", "明", "臧", "计", "伏", "成", "戴", "谈", "宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝", "董", "梁", "杜", "阮", "蓝", "闵", "席", "季", "麻", "强", "贾", "路", "娄", "危", "江", "童", "颜", "郭", "梅", "盛", "林", "刁", "钟", "徐", "邱", "骆", "高", "夏", "蔡", "田", "樊", "胡", "凌", "霍", "虞", "万", "支", "柯", "昝", "管", "卢", "莫", "经", "房", "裘", "缪", "干", "解", "应", "宗", "丁", "宣", "贲", "邓", "郁", "单", "杭", "洪", "包", "诸", "左", "石", "崔", "吉", "钮", "龚", "程", "嵇", "邢", "滑", "裴", "陆", "荣", "翁", "荀", "羊", "於", "惠", "甄", "麴", "家", "封", "芮", "羿", "储", "靳", "汲", "邴", "糜", "松", "井", "段", "富", "巫", "乌", "焦", "巴", "弓", "牧", "隗", "山", "谷", "车", "侯", "宓", "蓬", "全", "郗", "班", "仰", "秋", "仲", "伊", "宫", "宁", "仇", "栾", "暴", "甘", "钭", "厉", "戎", "祖", "武", "符", "刘", "景", "詹", "束", "龙", "叶", "幸", "司", "韶", "郜", "黎", "蓟", "薄", "印", "宿", "白", "怀", "蒲", "邰", "从", "鄂", "索", "咸", "籍", "赖", "卓", "蔺", "屠", "蒙", "池", "乔", "阴", "郁", "胥", "能", "苍", "双", "闻", "莘", "党", "翟", "谭", "贡", "劳", "逄", "姬", "申", "扶", "堵", "冉", "宰", "郦", "雍", "舄", "璩", "桑", "桂", "濮", "牛", "寿", "通", "边", "扈", "燕", "冀", "郏", "浦", "尚", "农", "温", "别", "庄", "晏", "柴", "瞿", "阎", "充", "慕", "连", "茹", "习", "宦", "艾", "鱼", "容", "向", "古", "易", "慎", "戈", "廖", "庾", "终", "暨", "居", "衡", "步", "都", "耿", "满", "弘", "匡", "国", "文", "寇", "广", "禄", "阙", "东", "殴", "殳", "沃", "利", "蔚", "越", "夔", "隆", "师", "巩", "厍", "聂", "晁", "勾", "敖", "融", "冷", "訾", "辛", "阚", "那", "简", "饶", "空", "曾", "毋", "沙", "乜", "养", "鞠", "须", "丰", "巢", "关", "蒯", "相", "查", "後", "荆", "红", "游", "竺", "权", "逯", "盖", "益", "桓", "公", "仉", "督", "晋", "楚", "闫", "法", "汝", "鄢", "涂", "钦", "归", "海", "岳", "帅", "缑", "亢", "况", "后", "有", "琴", "商", "牟", "佘", "佴", "伯", "赏", "墨", "哈", "谯", "笪", "年", "爱", "阳", "佟", "言", "福" };

	//百家姓-复姓
	const char* NA2[59] = { "万俟", "司马", "上官", "欧阳", "夏侯", "诸葛", "闻人", "东方", "赫连", "皇甫", "尉迟", "公羊", "澹台", "公冶", "宗政", "濮阳", "淳于", "单于", "太叔", "申屠", "公孙", "仲孙", "轩辕", "令狐", "钟离", "宇文", "长孙", "慕容", "鲜于", "闾丘", "司徒", "司空", "亓官", "司寇", "子车", "颛孙", "端木", "巫马", "公西", "漆雕", "乐正", "壤驷", "公良", "拓跋", "夹谷", "宰父", "谷梁", "百里", "东郭", "南门", "呼延", "羊舌", "微生", "梁丘", "左丘", "东门", "西门", "南宫", "第五" };

	//男性常用名
	const char* ME1m[140] = { "伟", "刚", "勇", "毅", "俊", "峰", "强", "军", "平", "保", "东", "文", "辉", "力", "明", "永", "健", "世", "广", "志", "义", "兴", "良", "海", "山", "仁", "波", "宁", "贵", "福", "生", "龙", "元", "全", "国", "胜", "学", "祥", "才", "发", "武", "新", "利", "清", "飞", "彬", "富", "顺", "信", "子", "杰", "涛", "昌", "成", "康", "星", "光", "天", "达", "安", "岩", "中", "茂", "进", "林", "有", "坚", "和", "彪", "博", "诚", "先", "敬", "震", "振", "壮", "会", "思", "群", "豪", "心", "邦", "承", "乐", "绍", "功", "松", "善", "厚", "庆", "磊", "民", "友", "裕", "河", "哲", "江", "超", "浩", "亮", "政", "谦", "亨", "奇", "固", "之", "轮", "翰", "朗", "伯", "宏", "言", "若", "鸣", "朋", "斌", "梁", "栋", "维", "启", "克", "伦", "翔", "旭", "鹏", "泽", "晨", "辰", "士", "以", "建", "家", "致", "树", "炎", "德", "行", "时", "泰", "盛" };
	const char* ME2m[140] = { "伟", "刚", "勇", "毅", "俊", "峰", "强", "军", "平", "保", "东", "文", "辉", "力", "明", "永", "健", "世", "广", "志", "义", "兴", "良", "海", "山", "仁", "波", "宁", "贵", "福", "生", "龙", "元", "全", "国", "胜", "学", "祥", "才", "发", "武", "新", "利", "清", "飞", "彬", "富", "顺", "信", "子", "杰", "涛", "昌", "成", "康", "星", "光", "天", "达", "安", "岩", "中", "茂", "进", "林", "有", "坚", "和", "彪", "博", "诚", "先", "敬", "震", "振", "壮", "会", "思", "群", "豪", "心", "邦", "承", "乐", "绍", "功", "松", "善", "厚", "庆", "磊", "民", "友", "裕", "河", "哲", "江", "超", "浩", "亮", "政", "谦", "亨", "奇", "固", "之", "轮", "翰", "朗", "伯", "宏", "言", "若", "鸣", "朋", "斌", "梁", "栋", "维", "启", "克", "伦", "翔", "旭", "鹏", "泽", "晨", "辰", "士", "以", "建", "家", "致", "树", "炎", "德", "行", "时", "泰", "盛" };


	//女性常用名
	const char* ME1f[165] = { "秀", "娟", "英", "华", "慧", "巧", "美", "娜", "静", "淑", "惠", "珠", "翠", "雅", "芝", "玉", "萍", "红", "娥", "玲", "芬", "芳", "燕", "彩", "春", "菊", "兰", "凤", "洁", "梅", "琳", "素", "云", "莲", "真", "环", "雪", "荣", "爱", "妹", "霞", "香", "月", "莺", "媛", "艳", "瑞", "凡", "佳", "嘉", "琼", "勤", "珍", "贞", "莉", "桂", "娣", "叶", "璧", "璐", "娅", "琦", "晶", "妍", "茜", "秋", "珊", "莎", "锦", "黛", "青", "倩", "婷", "姣", "婉", "娴", "瑾", "颖", "露", "瑶", "怡", "婵", "雁", "蓓", "纨", "仪", "荷", "丹", "蓉", "眉", "君", "琴", "蕊", "薇", "菁", "梦", "岚", "苑", "筠", "柔", "竹", "霭", "凝", "晓", "欢", "霄", "枫", "芸", "菲", "寒", "欣", "滢", "伊", "亚", "宜", "可", "姬", "舒", "影", "荔", "枝", "思", "丽", "秀", "飘", "育", "馥", "琦", "晶", "妍", "茜", "秋", "珊", "莎", "锦", "黛", "青", "倩", "婷", "宁", "蓓", "纨", "苑", "婕", "馨", "瑗", "琰", "韵", "融", "园", "艺", "咏", "卿", "聪", "澜", "纯", "毓", "悦", "昭", "冰", "爽", "琬", "茗", "羽", "希" };
	const char* ME2f[165] = { "秀", "娟", "英", "华", "慧", "巧", "美", "娜", "静", "淑", "惠", "珠", "翠", "雅", "芝", "玉", "萍", "红", "娥", "玲", "芬", "芳", "燕", "彩", "春", "菊", "兰", "凤", "洁", "梅", "琳", "素", "云", "莲", "真", "环", "雪", "荣", "爱", "妹", "霞", "香", "月", "莺", "媛", "艳", "瑞", "凡", "佳", "嘉", "琼", "勤", "珍", "贞", "莉", "桂", "娣", "叶", "璧", "璐", "娅", "琦", "晶", "妍", "茜", "秋", "珊", "莎", "锦", "黛", "青", "倩", "婷", "姣", "婉", "娴", "瑾", "颖", "露", "瑶", "怡", "婵", "雁", "蓓", "纨", "仪", "荷", "丹", "蓉", "眉", "君", "琴", "蕊", "薇", "菁", "梦", "岚", "苑", "筠", "柔", "竹", "霭", "凝", "晓", "欢", "霄", "枫", "芸", "菲", "寒", "欣", "滢", "伊", "亚", "宜", "可", "姬", "舒", "影", "荔", "枝", "思", "丽", "秀", "飘", "育", "馥", "琦", "晶", "妍", "茜", "秋", "珊", "莎", "锦", "黛", "青", "倩", "婷", "宁", "蓓", "纨", "苑", "婕", "馨", "瑗", "琰", "韵", "融", "园", "艺", "咏", "卿", "聪", "澜", "纯", "毓", "悦", "昭", "冰", "爽", "琬", "茗", "羽", "希" };
	//cout << rand() << endl;
	int NA1Roll = rand() % 444;//单姓
	int NA2Roll = rand() % 59;//复姓
	int ME1mRoll = rand() % 140;//男名
	int ME2mRoll = rand() % 140;//男名
	int ME1fRoll = rand() % 165;//女名
	int ME2fRoll = rand() % 165;//女名
	string name;
	switch (rand()%8)
	{
	case 0:
		

		//单姓单名男
		//printf("单姓单名男:%s%s\n", NA1[NA1Roll], ME1m[ME1mRoll]);
		return string(NA1[NA1Roll]) + string(ME1m[ME1mRoll]);
	case 1:
		NA1Roll = rand() % 444;//单姓
		ME1fRoll = rand() % 140;//男名
		//单姓单名女
		//printf("单姓单名女:%s%s\n", NA1[NA1Roll], ME1f[ME1fRoll]);
		return name = string(NA1[NA1Roll]) + string(ME1f[ME1fRoll]);
	case 2:
		NA1Roll = rand() % 444;//单姓
		ME1mRoll = rand() % 140;//男名
		ME2mRoll = rand() % 140;//男名
		//单姓双名男
		//printf("单姓双名男:%s%s%s\n", NA1[NA1Roll], ME1m[ME1mRoll], ME1m[ME2mRoll]);
		return string(NA1[NA1Roll]) + string(ME1m[ME1mRoll]) + string(ME1m[ME2mRoll]);
	case 3:
		NA1Roll = rand() % 444;//单姓
		ME1fRoll = rand() % 165;//女名
		ME2fRoll = rand() % 165;//女名
		//单姓双名女
		//printf("单姓双名女:%s%s%s\n", NA1[NA1Roll], ME1f[ME1fRoll], ME1f[ME2fRoll]);
		return string(NA1[NA1Roll]) + string(ME1f[ME1fRoll]) + string(ME1f[ME2fRoll]);
	case 4:
		NA2Roll = rand() % 59;//复姓
		ME1mRoll = rand() % 140;//男名
		//复姓单名男
		//printf("复姓单名男:%s%s\n", NA2[NA2Roll], ME1m[ME1mRoll]);
		return string(NA2[NA2Roll]) + string(ME1m[ME1mRoll]);
	case 5:
		NA2Roll = rand() % 59;//复姓
		ME1fRoll = rand() % 165;//女名
		//复姓单名女
		//printf("复姓单名女:%s%s\n", NA2[NA2Roll], ME1f[ME1fRoll]);
		return string(NA2[NA2Roll]) + string(ME1f[ME1fRoll]);
	case 6:
		NA2Roll = rand() % 59;//复姓
		ME1mRoll = rand() % 140;//男名
		ME2mRoll = rand() % 140;//男名
		//复姓双名男
		//printf("复姓双名男:%s%s%s\n", NA2[NA2Roll], ME1m[ME1mRoll], ME2m[ME2mRoll]);
		return string(NA2[NA2Roll]) + string(ME1m[ME1mRoll]) + string(ME2m[ME2mRoll]);
	case 7:
		NA2Roll = rand() % 59;//复姓
		ME1fRoll = rand() % 165;//女名
		ME2fRoll = rand() % 165;//女名
		//复姓双名女
		//printf("复姓双名女:%s%s%s\n", NA2[NA2Roll], ME1f[ME1fRoll], ME2f[ME2fRoll]);
		return string(NA2[NA2Roll]) + string(ME1f[ME1fRoll]) + string(ME2f[ME2fRoll]);

	default:
		break;
	}

}
bool IsRegexInput(string str1)          // 使用正则表达式进行匹配，
{
	bool flag;
	flag = true;
	regex r("\\d+");
	while (!(flag = regex_match(str1, r)))
	{
		return flag;
	}
	return flag;
}

int main0()
{   
	// 创建通讯录
	Addressbooks abs;
	abs.m_Size = 0;

	int select = 0;
	while (true)
	{
		showMenu();

		//cin >> select;
		string str;
		cout << "input a int:" << endl;
		cin >> str;
		/*当定义一个int变量，用cin输入时，如果输入的是一个字符，会发生以下4中情况：
			1.n的值变成0
			2.不匹配的输入被留在输入流中
			3.cin对象的一个错误标记被设置，即cin.fail()返回true
			4.对cin的方法调用返回false，即(cin >> n)返回的是false*/
		//if (cin.fail() == true)
		//{
		//	cout << "输入的不是数字\n";
		//	cin.clear();  //清空标记
		//	cin.get();  //吸收上一次输入的最后的回车
		//	continue;
		//}
		
		while (!IsRegexInput(str))   // 判断输入的内容是否为整形
		{
			cout << "输入内容格式有误，请输入数字：\n";
			cin >> str;
		}
		select = atoi(str.c_str());     //输入没有问题，进行字符串转换为整形


		switch (select)
		{
		case 1://1.添加联系人
			addPerson(&abs);// 地址传递
			break;
		case 2://2.显示联系人	
			showPerson(&abs);
			break;
		case 3://3.删除联系人	
			deletePerson(&abs);
			break;
		case 4://4.查找联系人
			findPerson(&abs);
			break;
		case 5://5.修改联系人
			modifyPerson(&abs);
			break;
		case 6://6.清空联系人
			cleanPerson(&abs);
			break;
		case 0://0.退出通讯录
			cout << "欢迎下次使用" << endl;
			system("pause");
			return 0;
			break;
		default:
			cout << "请输入正确指令！！" << endl;
			break;
		}
	}
	
	/*start:
		cout << "是否开始随机姓名? Y/N \n" << endl;
			char choose = _getch();
			switch (choose)
			{
			case 'Y':
			case 'y':
			NAME();	
			goto start;
			case 'N':
			case 'n':
				break;
			default:
				cout << "输入错误,请重新输入\n" << endl;
				goto start;
			}  
	*/
}
// 菜单
void showMenu()
{
	cout << "**********************" << endl;
	cout << "*****1.添加联系人*****" << endl;
	cout << "*****2.显示联系人*****" << endl;
	cout << "*****3.删除联系人*****" << endl;
	cout << "*****4.查找联系人*****" << endl;
	cout << "*****5.修改联系人*****" << endl;
	cout << "*****6.清空联系人*****" << endl;
	cout << "*****0.退出通讯录*****" << endl;
	cout << "**********************" << endl;
};
// 1.添加联系人
void addPerson(Addressbooks *abs)
{
	// 通讯录是否已满
	if (abs->m_Size==MAX)
	{
		cout << "通讯录已满" << endl;
		return;
	}
	else
	{
		// 添加具体联系人
		// 姓名
		string name;
		cout << "请输入姓名：" << endl;
		cin >> name;
		if (name == "y")
		{
			name = NAME();
			cout << "随机选择的名字是" << name << endl;
		}
		abs->personArray[abs->m_Size].m_Name = name;
		// 性别
		cout << "请输入性别：" << endl;
		cout << "1--男：" << endl;
		cout << "2--女：" << endl;
		int sex = 0;
		while (true)
		{
			cin >> sex;
			if (sex == 1 || sex == 2)
			{
				abs->personArray[abs->m_Size].m_Sex = sex;
				break;
			}
			cout << "输入有误，请重新输入" << endl;
		}
		// 年龄
		cout << "请输入年龄：" << endl;
		int age = 0;
		while (true)
		{
			cin >> age;
			if (age >= 0 && age <= 120)
			{
				abs->personArray[abs->m_Size].m_Age = age;
				break;
			}
			cout << "输入有误，请重新输入" << endl;
		}
		//联系电话
		cout << "请输入电话：" << endl;
		string phone;
		cin >> phone;
		abs->personArray[abs->m_Size].m_Phone = phone;
		//家庭住址
		cout << "请输入家庭住址：" << endl;
		string address;
		cin >> address;
		abs->personArray[abs->m_Size].m_Addr = address;
		//更新通讯录人数
		abs->m_Size++;

		cout << "添加成功" << endl;
		system("pause"); 

		system("cls");
	}
};

// 2.显示联系人
void showPerson(Addressbooks* abs)
{
	if (abs->m_Size == 0)
	{
		cout << "当前记录为空" << endl;
	}
	else
	{
		for (size_t i = 0; i < abs->m_Size; i++)
		{
			cout << "姓名：" << abs->personArray[i].m_Name << "\t";
			cout << "性别：" << (abs->personArray[i].m_Sex == 1 ? "男":"女" )<< "\t";
			cout << "年龄：" << abs->personArray[i].m_Age << "\t";
			cout << "电话：" << abs->personArray[i].m_Phone << "\t";
			cout << "住址：" << abs->personArray[i].m_Addr << endl;
		}
	}
	system("pause");

	system("cls");
}

// 3. 删除联系人
int isExit(Addressbooks* abs, string name)//检测联系人是否存在，如果存在，返回具体位置，不存在返回-1
{
	for (size_t i = 0; i < abs->m_Size; i++)
	{
		if (abs->personArray[i].m_Name == name)
			return i;
	}
	return -1;
}
void deletePerson(Addressbooks* abs)
{
		cout << "请输入删除联系人姓名" << endl;
		string name;
		cin >> name;
		int ret = isExit(abs, name);
		if (ret == -1) {
			cout << "查无此人" << endl;
		}
		else
		{
			for (size_t i = ret; i < abs->m_Size; i++)
			{
				//数据前移
				abs->personArray[i] = abs->personArray[i + 1];
			}
			abs->m_Size--;
			cout << "删除成功" << endl;
		}
		system("pause");

		system("cls");
}

// 4. 查找联系人
void findPerson(Addressbooks* abs)
{
	cout << "请输入查找联系人姓名" << endl;
	string name;
	cin >> name;
	int ret = isExit(abs, name);
	if (ret == -1) {
		cout << "查无此人" << endl;
	}
	else
	{
		cout << "姓名：" << abs->personArray[ret].m_Name << "\t";
		cout << "性别：" << (abs->personArray[ret].m_Sex == 1 ? "男" : "女") << "\t";
		cout << "年龄：" << abs->personArray[ret].m_Age << "\t";
		cout << "电话：" << abs->personArray[ret].m_Phone << "\t";
		cout << "住址：" << abs->personArray[ret].m_Addr << endl;
	}
	system("pause");
	system("cls");
}

// 5. 修改联系人
void modifyPerson(Addressbooks* abs)
{
	cout << "请输入要修改联系人的姓名" << endl;
	string name;
	cin >> name;
	int ret = isExit(abs, name);
	if (ret == -1) {
		cout << "查无此人" << endl;
	}
	else
	{
		// 姓名
		cout << "请输入姓名：" << endl;
		cin >> name;
		if (name == "y")
		{
			name = NAME();
			cout << "随机选择的名字是" << name << endl;
		}
		abs->personArray[ret].m_Name = name;
		// 性别
		cout << "请输入性别：" << endl;
		cout << "1--男：" << endl;
		cout << "2--女：" << endl;
		int sex = 0;
		while (true)
		{
			cin >> sex;
			if (sex == 1 || sex == 2)
			{
				abs->personArray[ret].m_Sex = sex;
				break;
			}
			cout << "输入有误，请重新输入" << endl;
		}
		// 年龄
		cout << "请输入年龄：" << endl;
		int age = 0;
		while (true)
		{
			cin >> age;
			if (age >= 0 && age <= 120)
			{
				abs->personArray[ret].m_Age = age;
				break;
			}
			cout << "输入有误，请重新输入" << endl;
		}
		//联系电话
		cout << "请输入电话：" << endl;
		string phone;
		cin >> phone;
		abs->personArray[ret].m_Phone = phone;
		//家庭住址
		cout << "请输入家庭住址：" << endl;
		string address;
		cin >> address;
		abs->personArray[ret].m_Addr = address;
	}
	system("pause");
	system("cls");
}

// 6. 清空联系人
void cleanPerson(Addressbooks* abs)
{
	abs->m_Size = 0;
	cout << "逻辑清空完成" << endl;
	system("pause");
	system("cls");
}